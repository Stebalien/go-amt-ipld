package amt

import (
	"fmt"
	"io"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

/* This file was generated by github.com/whyrusleeping/cbor-gen */

var _ = xerrors.Errorf

func (t *Root) MarshalCBOR(w io.Writer) error {
	if _, err := w.Write([]byte{131}); err != nil {
		return err
	}

	// t.t.Height (uint64)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajUnsignedInt, t.Height)); err != nil {
		return err
	}

	// t.t.Count (uint64)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajUnsignedInt, t.Count)); err != nil {
		return err
	}

	// t.t.Node (amt.Node)
	if err := t.Node.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *Root) UnmarshalCBOR(br io.Reader) error {

	maj, extra, err := cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.t.Height (uint64)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	t.Height = extra
	// t.t.Count (uint64)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	t.Count = extra
	// t.t.Node (amt.Node)

	if err := t.Node.UnmarshalCBOR(br); err != nil {
		return err
	}
	return nil
}

func (t *Node) MarshalCBOR(w io.Writer) error {
	if _, err := w.Write([]byte{131}); err != nil {
		return err
	}

	// t.t.Bmap ([]uint8)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajByteString, uint64(len(t.Bmap)))); err != nil {
		return err
	}
	if _, err := w.Write(t.Bmap); err != nil {
		return err
	}

	// t.t.Links ([]cid.Cid)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajArray, uint64(len(t.Links)))); err != nil {
		return err
	}
	for _, v := range t.Links {
		if err := cbg.WriteCid(w, v); err != nil {
			return xerrors.Errorf("failed writing cid field t.Links: %w", err)
		}
	}

	// t.t.Values ([]*typegen.Deferred)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajArray, uint64(len(t.Values)))); err != nil {
		return err
	}
	for _, v := range t.Values {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *Node) UnmarshalCBOR(br io.Reader) error {

	maj, extra, err := cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.t.Bmap ([]uint8)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if extra > 8192 {
		return fmt.Errorf("array too large")
	}

	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	t.Bmap = make([]byte, extra)
	if _, err := io.ReadFull(br, t.Bmap); err != nil {
		return err
	}
	// t.t.Links ([]cid.Cid)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if extra > 8192 {
		return fmt.Errorf("array too large")
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}
	if extra > 0 {
		t.Links = make([]cid.Cid, extra)
	}
	for i := 0; i < int(extra); i++ {

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("reading cid field t.Links failed: %w", err)
		}
		t.Links[i] = c
	}

	// t.t.Values ([]*typegen.Deferred)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if extra > 8192 {
		return fmt.Errorf("array too large")
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}
	if extra > 0 {
		t.Values = make([]*cbg.Deferred, extra)
	}
	for i := 0; i < int(extra); i++ {
		var v cbg.Deferred
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Values[i] = &v
	}

	return nil
}
